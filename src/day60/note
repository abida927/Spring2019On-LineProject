Warm Up

Polymorphism is ability of the obj taking many form
in another word, and obj can be referenced by it's own type
or it's super class type
or it's interface type that the class implemented;

Power of Polymophism
making correct decision at runtime according actual obj type 
to call the overriden version of the method

//Animal a1 = new Dog();
a1.makeNoise()---> woof woof

this will give us a lot of flexibility while writing to code
we can easily swap the implementation to get correct behavior
 at runtime
 we can group obj together by it's general types and take general
 actions without worrying about details
 
 Animal[] allAnimalss ={new Dog(), new Cat(), new Horse()}
 for(Animal each : allAnimals){
 each.makeNoise()---> each animal's noise
 
 Animal a2 = new Horse();
 what you can access using a2 reference
 
 ONLY the members that avaible in Animal class.
 
 in order to access Horse specific members we must have a Horse reference
 
 ONLY REFERENCE TYPE DECIDE WHAT IS ACCESSIBLE USING THE REFERENCE VARIABLE 
    Object o = new Dog(); 
    System.out.println( o.toString()  );
    // AT RUNTIME -->> new Dog().toString()
    
    // Dog d = new Object() ; 