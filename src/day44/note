Object -- instance of class or actual object created 

Class 
	is a blueprint/ template to an object 

	fields/ variables 
		-- instance variable -- define properties of object
		-- static variable  -- this is coming tomorrow 
		
	methods 
		-- instance methods --->  
			 we need an object to use it 
			 and it's mostly used for reading/ manipulating object's property 
			 
		
		-- static methods 
			no object needed to use it 
			and mostly used for utility method 
				that has nothing to do with object's properties 
				
	// POJO CLASS
// PLAIN OLD JAVA OBJECT 

/*
 * It has privates fields to represent object's attribute 
 * it has public getters and setters 
 * it has constructors to set all the field value 
 * it has toString method to return String representation of the object 
 * 	in nice format with all fields value 
 * 
 * 
 * */
				
	Constructor 
		-- this is a special block of code that run automatically 
		   each time an object is being created 
		   
		-- it has same name as current Class
		-- it does not have return type 
		-- it can have any type of access modifier
		
		We can have multiple version of constructor 
			-- overloading 
					-- same rule apply as method (same name diff param list)
			 

		   public AC{
		   	
		   		boolean on; 
		   		
		   		same name as classname and must not have return type
		   		THIS IS NOT A CONSTRUCTOR 
		   		It is just a method happen to have same name as class name
		   		and return type is void 
		   		
		   		public void AC(){
		   			sysout("boom!")
		   		}
		   		
		   
		   }
		   
		   in Main method
		   AC ac1 = new AC() ; 
		   
		   
		   If a constructor is not defined in the class 
		   compiler will provide one 
		   		--->>> default constructor -- no arg empty constructor 
		   What if we have any constructor exaksts in the class
		   		--->>> we don't get default constructor by compiler 
		   		
		
		What's the most useful way to use constructor 
			 initialize all the field values of an object while being created
		   
		WARM UP 
		
		  Job class
     *
     *   private fields 
     		title , company , annualSalary
     *
     *   Encapsulate above private instance fields
     *   Create no arg constructor -- constructor with no parameter
     *       to set title to “undefined”
     		 to set company to “unknown”
     	
     	-- constructor with 1 parameter	 
     *   Create 1 arg constructor to set title  
     *  -- constructor with 3 parameters	 
     	 Create 3 arg constructor to set all 3 fields
     *
     
     *   create a method called toString
     *   it accepts no parameters and
     *   return concatenation of all field value in nice format
     *
     	
     	Inside another class Called JobSeeking with main method 
     
     *   Create few job objects and and add it to ArrayList<Job> object
     *   iterate over all items and print them out
     *
     * */
		
		
		 if we print out any reference variable directly
		 or any object directly 
		 it will by default call toString() method 
		 
		 if you have toString method defined in your own class 
		 it will print out whatever that method return 
		 if not we will get Hashcode
		 
		 when we print out 
		 List<WrapperType> List<String> objects directly 
		 		it will just show what's inside directly 
		 if it's 
		 List<CustomType> object and 
		 	if there is toString method defined in that CustomType Class
		 	it will print out each item as the toString return value
		 		instead of hashcode 
		 		
		
		
		Task : 
		


MathEquation e1 = new MathEquation(12.1,33.2, '-'); 

Create a class called MathEquation 
	add 4 private fields 
		oprand1 , oprand2 , result as double 
		operator as char 

	Encapsulate first 3 fiels 
		with getters and setters
	provide only getter for the result 

	Create no arg constructor 
		just print out message from no Arg 

	create 1 arg constructor 
		set the operator value 

	create 3 args constructor 
		set all 3 fields value 
				: oprand1, oprand2, operator 

	create a void instance method calculate
			with no parameter
		set the result value 
			according to oprand1 oprand2 operator
			if operator is + - * / 
				calculate result 

	Create toString method to return all fields value 


	In main method in another class
	create 4 MathEquation objects 
	and call calculate method 
	and print out the result field value 


